<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.hzz.learning.infrastructure.dao.mapper.question.InteractionReplyMapper">
  <resultMap id="BaseResultMap" type="org.hzz.learning.infrastructure.dao.entity.question.InteractionReply">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="question_id" jdbcType="BIGINT" property="questionId" />
    <result column="answer_id" jdbcType="BIGINT" property="answerId" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="target_user_id" jdbcType="BIGINT" property="targetUserId" />
    <result column="target_reply_id" jdbcType="BIGINT" property="targetReplyId" />
    <result column="reply_times" jdbcType="INTEGER" property="replyTimes" />
    <result column="liked_times" jdbcType="INTEGER" property="likedTimes" />
    <result column="hidden" jdbcType="BIT" property="hidden" />
    <result column="anonymity" jdbcType="BIT" property="anonymity" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, question_id, answer_id, user_id, content, target_user_id, target_reply_id, reply_times, 
    liked_times, hidden, anonymity, create_time, update_time
  </sql>
  <select id="selectByExample" parameterType="org.hzz.learning.infrastructure.dao.entity.question.InteractionReplyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from interaction_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from interaction_reply
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from interaction_reply
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="org.hzz.learning.infrastructure.dao.entity.question.InteractionReplyExample">
    delete from interaction_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.hzz.learning.infrastructure.dao.entity.question.InteractionReply">
    insert into interaction_reply (id, question_id, answer_id,
                                   user_id, content, target_user_id,
                                   target_reply_id, reply_times, liked_times,
                                   hidden, anonymity, create_time,
                                   update_time)
    values (#{id,jdbcType=BIGINT}, #{questionId,jdbcType=BIGINT}, #{answerId,jdbcType=BIGINT},
            #{userId,jdbcType=BIGINT}, #{content,jdbcType=VARCHAR}, #{targetUserId,jdbcType=BIGINT},
            #{targetReplyId,jdbcType=BIGINT}, #{replyTimes,jdbcType=INTEGER}, #{likedTimes,jdbcType=INTEGER},
            #{hidden,jdbcType=BIT}, #{anonymity,jdbcType=BIT}, #{createTime,jdbcType=TIMESTAMP},
            #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="org.hzz.learning.infrastructure.dao.entity.question.InteractionReply">
    insert into interaction_reply
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="questionId != null">
        question_id,
      </if>
      <if test="answerId != null">
        answer_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="targetUserId != null">
        target_user_id,
      </if>
      <if test="targetReplyId != null">
        target_reply_id,
      </if>
      <if test="replyTimes != null">
        reply_times,
      </if>
      <if test="likedTimes != null">
        liked_times,
      </if>
      <if test="hidden != null">
        hidden,
      </if>
      <if test="anonymity != null">
        anonymity,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="questionId != null">
        #{questionId,jdbcType=BIGINT},
      </if>
      <if test="answerId != null">
        #{answerId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="targetUserId != null">
        #{targetUserId,jdbcType=BIGINT},
      </if>
      <if test="targetReplyId != null">
        #{targetReplyId,jdbcType=BIGINT},
      </if>
      <if test="replyTimes != null">
        #{replyTimes,jdbcType=INTEGER},
      </if>
      <if test="likedTimes != null">
        #{likedTimes,jdbcType=INTEGER},
      </if>
      <if test="hidden != null">
        #{hidden,jdbcType=BIT},
      </if>
      <if test="anonymity != null">
        #{anonymity,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.hzz.learning.infrastructure.dao.entity.question.InteractionReplyExample" resultType="java.lang.Long">
    select count(*) from interaction_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update interaction_reply
    <set>
      <if test="row.id != null">
        id = #{row.id,jdbcType=BIGINT},
      </if>
      <if test="row.questionId != null">
        question_id = #{row.questionId,jdbcType=BIGINT},
      </if>
      <if test="row.answerId != null">
        answer_id = #{row.answerId,jdbcType=BIGINT},
      </if>
      <if test="row.userId != null">
        user_id = #{row.userId,jdbcType=BIGINT},
      </if>
      <if test="row.content != null">
        content = #{row.content,jdbcType=VARCHAR},
      </if>
      <if test="row.targetUserId != null">
        target_user_id = #{row.targetUserId,jdbcType=BIGINT},
      </if>
      <if test="row.targetReplyId != null">
        target_reply_id = #{row.targetReplyId,jdbcType=BIGINT},
      </if>
      <if test="row.replyTimes != null">
        reply_times = #{row.replyTimes,jdbcType=INTEGER},
      </if>
      <if test="row.likedTimes != null">
        liked_times = #{row.likedTimes,jdbcType=INTEGER},
      </if>
      <if test="row.hidden != null">
        hidden = #{row.hidden,jdbcType=BIT},
      </if>
      <if test="row.anonymity != null">
        anonymity = #{row.anonymity,jdbcType=BIT},
      </if>
      <if test="row.createTime != null">
        create_time = #{row.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="row.updateTime != null">
        update_time = #{row.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update interaction_reply
    set id = #{row.id,jdbcType=BIGINT},
    question_id = #{row.questionId,jdbcType=BIGINT},
    answer_id = #{row.answerId,jdbcType=BIGINT},
    user_id = #{row.userId,jdbcType=BIGINT},
    content = #{row.content,jdbcType=VARCHAR},
    target_user_id = #{row.targetUserId,jdbcType=BIGINT},
    target_reply_id = #{row.targetReplyId,jdbcType=BIGINT},
    reply_times = #{row.replyTimes,jdbcType=INTEGER},
    liked_times = #{row.likedTimes,jdbcType=INTEGER},
    hidden = #{row.hidden,jdbcType=BIT},
    anonymity = #{row.anonymity,jdbcType=BIT},
    create_time = #{row.createTime,jdbcType=TIMESTAMP},
    update_time = #{row.updateTime,jdbcType=TIMESTAMP}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.hzz.learning.infrastructure.dao.entity.question.InteractionReply">
    update interaction_reply
    <set>
      <if test="questionId != null">
        question_id = #{questionId,jdbcType=BIGINT},
      </if>
      <if test="answerId != null">
        answer_id = #{answerId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="targetUserId != null">
        target_user_id = #{targetUserId,jdbcType=BIGINT},
      </if>
      <if test="targetReplyId != null">
        target_reply_id = #{targetReplyId,jdbcType=BIGINT},
      </if>
      <if test="replyTimes != null">
        reply_times = #{replyTimes,jdbcType=INTEGER},
      </if>
      <if test="likedTimes != null">
        liked_times = #{likedTimes,jdbcType=INTEGER},
      </if>
      <if test="hidden != null">
        hidden = #{hidden,jdbcType=BIT},
      </if>
      <if test="anonymity != null">
        anonymity = #{anonymity,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.hzz.learning.infrastructure.dao.entity.question.InteractionReply">
    update interaction_reply
    set question_id = #{questionId,jdbcType=BIGINT},
        answer_id = #{answerId,jdbcType=BIGINT},
        user_id = #{userId,jdbcType=BIGINT},
        content = #{content,jdbcType=VARCHAR},
        target_user_id = #{targetUserId,jdbcType=BIGINT},
        target_reply_id = #{targetReplyId,jdbcType=BIGINT},
        reply_times = #{replyTimes,jdbcType=INTEGER},
        liked_times = #{likedTimes,jdbcType=INTEGER},
        hidden = #{hidden,jdbcType=BIT},
        anonymity = #{anonymity,jdbcType=BIT},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>