<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.hzz.learning.infrastructure.dao.mapper.LearningLessonMapper">
  <resultMap id="BaseResultMap" type="org.hzz.learning.infrastructure.dao.po.LearningLesson">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="course_id" jdbcType="BIGINT" property="courseId" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="week_freq" jdbcType="TINYINT" property="weekFreq" />
    <result column="plan_status" jdbcType="TINYINT" property="planStatus" />
    <result column="learned_sections" jdbcType="INTEGER" property="learnedSections" />
    <result column="latest_section_id" jdbcType="BIGINT" property="latestSectionId" />
    <result column="latest_learn_time" jdbcType="TIMESTAMP" property="latestLearnTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="expire_time" jdbcType="TIMESTAMP" property="expireTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, course_id, status, week_freq, plan_status, learned_sections, latest_section_id, 
    latest_learn_time, create_time, expire_time, update_time
  </sql>
  <select id="selectByExample" parameterType="org.hzz.learning.infrastructure.dao.po.LearningLessonExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from learning_lesson
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from learning_lesson
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from learning_lesson
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="org.hzz.learning.infrastructure.dao.po.LearningLessonExample">
    delete from learning_lesson
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.hzz.learning.infrastructure.dao.po.LearningLesson">
    insert into learning_lesson (id, user_id, course_id, 
      status, week_freq, plan_status, 
      learned_sections, latest_section_id, latest_learn_time, 
      create_time, expire_time, update_time
      )
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{courseId,jdbcType=BIGINT}, 
      #{status,jdbcType=TINYINT}, #{weekFreq,jdbcType=TINYINT}, #{planStatus,jdbcType=TINYINT}, 
      #{learnedSections,jdbcType=INTEGER}, #{latestSectionId,jdbcType=BIGINT}, #{latestLearnTime,jdbcType=TIMESTAMP}, 
      #{createTime,jdbcType=TIMESTAMP}, #{expireTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="org.hzz.learning.infrastructure.dao.po.LearningLesson">
    insert into learning_lesson
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="courseId != null">
        course_id,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="weekFreq != null">
        week_freq,
      </if>
      <if test="planStatus != null">
        plan_status,
      </if>
      <if test="learnedSections != null">
        learned_sections,
      </if>
      <if test="latestSectionId != null">
        latest_section_id,
      </if>
      <if test="latestLearnTime != null">
        latest_learn_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="expireTime != null">
        expire_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="courseId != null">
        #{courseId,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="weekFreq != null">
        #{weekFreq,jdbcType=TINYINT},
      </if>
      <if test="planStatus != null">
        #{planStatus,jdbcType=TINYINT},
      </if>
      <if test="learnedSections != null">
        #{learnedSections,jdbcType=INTEGER},
      </if>
      <if test="latestSectionId != null">
        #{latestSectionId,jdbcType=BIGINT},
      </if>
      <if test="latestLearnTime != null">
        #{latestLearnTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="expireTime != null">
        #{expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.hzz.learning.infrastructure.dao.po.LearningLessonExample" resultType="java.lang.Long">
    select count(*) from learning_lesson
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update learning_lesson
    <set>
      <if test="row.id != null">
        id = #{row.id,jdbcType=BIGINT},
      </if>
      <if test="row.userId != null">
        user_id = #{row.userId,jdbcType=BIGINT},
      </if>
      <if test="row.courseId != null">
        course_id = #{row.courseId,jdbcType=BIGINT},
      </if>
      <if test="row.status != null">
        status = #{row.status,jdbcType=TINYINT},
      </if>
      <if test="row.weekFreq != null">
        week_freq = #{row.weekFreq,jdbcType=TINYINT},
      </if>
      <if test="row.planStatus != null">
        plan_status = #{row.planStatus,jdbcType=TINYINT},
      </if>
      <if test="row.learnedSections != null">
        learned_sections = #{row.learnedSections,jdbcType=INTEGER},
      </if>
      <if test="row.latestSectionId != null">
        latest_section_id = #{row.latestSectionId,jdbcType=BIGINT},
      </if>
      <if test="row.latestLearnTime != null">
        latest_learn_time = #{row.latestLearnTime,jdbcType=TIMESTAMP},
      </if>
      <if test="row.createTime != null">
        create_time = #{row.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="row.expireTime != null">
        expire_time = #{row.expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="row.updateTime != null">
        update_time = #{row.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update learning_lesson
    set id = #{row.id,jdbcType=BIGINT},
      user_id = #{row.userId,jdbcType=BIGINT},
      course_id = #{row.courseId,jdbcType=BIGINT},
      status = #{row.status,jdbcType=TINYINT},
      week_freq = #{row.weekFreq,jdbcType=TINYINT},
      plan_status = #{row.planStatus,jdbcType=TINYINT},
      learned_sections = #{row.learnedSections,jdbcType=INTEGER},
      latest_section_id = #{row.latestSectionId,jdbcType=BIGINT},
      latest_learn_time = #{row.latestLearnTime,jdbcType=TIMESTAMP},
      create_time = #{row.createTime,jdbcType=TIMESTAMP},
      expire_time = #{row.expireTime,jdbcType=TIMESTAMP},
      update_time = #{row.updateTime,jdbcType=TIMESTAMP}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.hzz.learning.infrastructure.dao.po.LearningLesson">
    update learning_lesson
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="courseId != null">
        course_id = #{courseId,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="weekFreq != null">
        week_freq = #{weekFreq,jdbcType=TINYINT},
      </if>
      <if test="planStatus != null">
        plan_status = #{planStatus,jdbcType=TINYINT},
      </if>
      <if test="learnedSections != null">
        learned_sections = #{learnedSections,jdbcType=INTEGER},
      </if>
      <if test="latestSectionId != null">
        latest_section_id = #{latestSectionId,jdbcType=BIGINT},
      </if>
      <if test="latestLearnTime != null">
        latest_learn_time = #{latestLearnTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="expireTime != null">
        expire_time = #{expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.hzz.learning.infrastructure.dao.po.LearningLesson">
    update learning_lesson
    set user_id = #{userId,jdbcType=BIGINT},
      course_id = #{courseId,jdbcType=BIGINT},
      status = #{status,jdbcType=TINYINT},
      week_freq = #{weekFreq,jdbcType=TINYINT},
      plan_status = #{planStatus,jdbcType=TINYINT},
      learned_sections = #{learnedSections,jdbcType=INTEGER},
      latest_section_id = #{latestSectionId,jdbcType=BIGINT},
      latest_learn_time = #{latestLearnTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      expire_time = #{expireTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>