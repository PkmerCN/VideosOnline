<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.hzz.learning.infrastructure.dao.mapper.record.LearningRecordMapper">
  <resultMap id="BaseResultMap" type="org.hzz.learning.infrastructure.dao.entity.record.LearningRecord">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="lesson_id" jdbcType="BIGINT" property="lessonId" />
    <result column="section_id" jdbcType="BIGINT" property="sectionId" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="moment" jdbcType="INTEGER" property="moment" />
    <result column="finished" jdbcType="BIT" property="finished" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="finish_time" jdbcType="TIMESTAMP" property="finishTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, lesson_id, section_id, user_id, moment, finished, create_time, finish_time, update_time
  </sql>
  <select id="selectByExample" parameterType="org.hzz.learning.infrastructure.dao.entity.record.LearningRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from learning_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from learning_record
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from learning_record
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="org.hzz.learning.infrastructure.dao.entity.record.LearningRecordExample">
    delete from learning_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.hzz.learning.infrastructure.dao.entity.record.LearningRecord">
    insert into learning_record (id, lesson_id, section_id, 
      user_id, moment, finished, 
      create_time, finish_time, update_time
      )
    values (#{id,jdbcType=BIGINT}, #{lessonId,jdbcType=BIGINT}, #{sectionId,jdbcType=BIGINT}, 
      #{userId,jdbcType=BIGINT}, #{moment,jdbcType=INTEGER}, #{finished,jdbcType=BIT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{finishTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="org.hzz.learning.infrastructure.dao.entity.record.LearningRecord">
    insert into learning_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="lessonId != null">
        lesson_id,
      </if>
      <if test="sectionId != null">
        section_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="moment != null">
        moment,
      </if>
      <if test="finished != null">
        finished,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="finishTime != null">
        finish_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="lessonId != null">
        #{lessonId,jdbcType=BIGINT},
      </if>
      <if test="sectionId != null">
        #{sectionId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="moment != null">
        #{moment,jdbcType=INTEGER},
      </if>
      <if test="finished != null">
        #{finished,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="finishTime != null">
        #{finishTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.hzz.learning.infrastructure.dao.entity.record.LearningRecordExample" resultType="java.lang.Long">
    select count(*) from learning_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update learning_record
    <set>
      <if test="row.id != null">
        id = #{row.id,jdbcType=BIGINT},
      </if>
      <if test="row.lessonId != null">
        lesson_id = #{row.lessonId,jdbcType=BIGINT},
      </if>
      <if test="row.sectionId != null">
        section_id = #{row.sectionId,jdbcType=BIGINT},
      </if>
      <if test="row.userId != null">
        user_id = #{row.userId,jdbcType=BIGINT},
      </if>
      <if test="row.moment != null">
        moment = #{row.moment,jdbcType=INTEGER},
      </if>
      <if test="row.finished != null">
        finished = #{row.finished,jdbcType=BIT},
      </if>
      <if test="row.createTime != null">
        create_time = #{row.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="row.finishTime != null">
        finish_time = #{row.finishTime,jdbcType=TIMESTAMP},
      </if>
      <if test="row.updateTime != null">
        update_time = #{row.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update learning_record
    set id = #{row.id,jdbcType=BIGINT},
      lesson_id = #{row.lessonId,jdbcType=BIGINT},
      section_id = #{row.sectionId,jdbcType=BIGINT},
      user_id = #{row.userId,jdbcType=BIGINT},
      moment = #{row.moment,jdbcType=INTEGER},
      finished = #{row.finished,jdbcType=BIT},
      create_time = #{row.createTime,jdbcType=TIMESTAMP},
      finish_time = #{row.finishTime,jdbcType=TIMESTAMP},
      update_time = #{row.updateTime,jdbcType=TIMESTAMP}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.hzz.learning.infrastructure.dao.entity.record.LearningRecord">
    update learning_record
    <set>
      <if test="lessonId != null">
        lesson_id = #{lessonId,jdbcType=BIGINT},
      </if>
      <if test="sectionId != null">
        section_id = #{sectionId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="moment != null">
        moment = #{moment,jdbcType=INTEGER},
      </if>
      <if test="finished != null">
        finished = #{finished,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="finishTime != null">
        finish_time = #{finishTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.hzz.learning.infrastructure.dao.entity.record.LearningRecord">
    update learning_record
    set lesson_id = #{lessonId,jdbcType=BIGINT},
      section_id = #{sectionId,jdbcType=BIGINT},
      user_id = #{userId,jdbcType=BIGINT},
      moment = #{moment,jdbcType=INTEGER},
      finished = #{finished,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      finish_time = #{finishTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>